### YamlMime:ManagedReference
items:
- uid: LobsterFramework.Utility.CombinedValue`1
  commentId: T:LobsterFramework.Utility.CombinedValue`1
  id: CombinedValue`1
  parent: LobsterFramework.Utility
  children:
  - LobsterFramework.Utility.CombinedValue`1.#ctor(`0)
  - LobsterFramework.Utility.CombinedValue`1.ClearEffectors
  - LobsterFramework.Utility.CombinedValue`1.Compatible(`0)
  - LobsterFramework.Utility.CombinedValue`1.ComputeValue
  - LobsterFramework.Utility.CombinedValue`1.EffectorCount
  - LobsterFramework.Utility.CombinedValue`1.MakeEffector
  - LobsterFramework.Utility.CombinedValue`1.Value
  - LobsterFramework.Utility.CombinedValue`1.baseValue
  - LobsterFramework.Utility.CombinedValue`1.op_Implicit(LobsterFramework.Utility.CombinedValue{`0})~`0
  - LobsterFramework.Utility.CombinedValue`1.stats
  langs:
  - csharp
  - vb
  name: CombinedValue<T>
  nameWithType: CombinedValue<T>
  fullName: LobsterFramework.Utility.CombinedValue<T>
  type: Class
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: CombinedValue
    path: ../Utility/CombinedValue.cs
    startLine: 11
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  summary: Represents the combined value of a set of values of the same type. <br />
  example: []
  syntax:
    content: 'public abstract class CombinedValue<T> where T : IEquatable<T>'
    typeParameters:
    - id: T
      description: The type of the value
    content.vb: Public MustInherit Class CombinedValue(Of T As IEquatable(Of T))
  inheritance:
  - System.Object
  derivedClasses:
  - LobsterFramework.Utility.And
  - LobsterFramework.Utility.FloatProduct
  - LobsterFramework.Utility.FloatSum
  - LobsterFramework.Utility.IntSum
  - LobsterFramework.Utility.Or
  nameWithType.vb: CombinedValue(Of T)
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T)
  name.vb: CombinedValue(Of T)
- uid: LobsterFramework.Utility.CombinedValue`1.stats
  commentId: F:LobsterFramework.Utility.CombinedValue`1.stats
  id: stats
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: stats
  nameWithType: CombinedValue<T>.stats
  fullName: LobsterFramework.Utility.CombinedValue<T>.stats
  type: Field
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: stats
    path: ../Utility/CombinedValue.cs
    startLine: 14
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  syntax:
    content: protected Dictionary<int, T> stats
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,{T}}
    content.vb: Protected stats As Dictionary(Of Integer, T)
  nameWithType.vb: CombinedValue(Of T).stats
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).stats
- uid: LobsterFramework.Utility.CombinedValue`1.baseValue
  commentId: F:LobsterFramework.Utility.CombinedValue`1.baseValue
  id: baseValue
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: baseValue
  nameWithType: CombinedValue<T>.baseValue
  fullName: LobsterFramework.Utility.CombinedValue<T>.baseValue
  type: Field
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: baseValue
    path: ../Utility/CombinedValue.cs
    startLine: 15
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  syntax:
    content: protected T baseValue
    return:
      type: '{T}'
    content.vb: Protected baseValue As T
  nameWithType.vb: CombinedValue(Of T).baseValue
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).baseValue
- uid: LobsterFramework.Utility.CombinedValue`1.op_Implicit(LobsterFramework.Utility.CombinedValue{`0})~`0
  commentId: M:LobsterFramework.Utility.CombinedValue`1.op_Implicit(LobsterFramework.Utility.CombinedValue{`0})~`0
  id: op_Implicit(LobsterFramework.Utility.CombinedValue{`0})~`0
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: implicit operator T(CombinedValue<T>)
  nameWithType: CombinedValue<T>.implicit operator T(CombinedValue<T>)
  fullName: LobsterFramework.Utility.CombinedValue<T>.implicit operator T(LobsterFramework.Utility.CombinedValue<T>)
  type: Operator
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: op_Implicit
    path: ../Utility/CombinedValue.cs
    startLine: 20
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  syntax:
    content: public static implicit operator T(CombinedValue<T> value)
    parameters:
    - id: value
      type: LobsterFramework.Utility.CombinedValue`1
    return:
      type: '{T}'
    content.vb: Public Shared Widening Operator CType(value As CombinedValue(Of T)) As T
  overload: LobsterFramework.Utility.CombinedValue`1.op_Implicit*
  nameWithType.vb: CombinedValue(Of T).CType(CombinedValue(Of T))
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).CType(LobsterFramework.Utility.CombinedValue(Of T))
  name.vb: CType(CombinedValue(Of T))
- uid: LobsterFramework.Utility.CombinedValue`1.#ctor(`0)
  commentId: M:LobsterFramework.Utility.CombinedValue`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: CombinedValue(T)
  nameWithType: CombinedValue<T>.CombinedValue(T)
  fullName: LobsterFramework.Utility.CombinedValue<T>.CombinedValue(T)
  type: Constructor
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: .ctor
    path: ../Utility/CombinedValue.cs
    startLine: 26
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  summary: ''
  example: []
  syntax:
    content: public CombinedValue(T baseValue)
    parameters:
    - id: baseValue
      type: '{T}'
      description: The base value when no effectors are present
    content.vb: Public Sub New(baseValue As T)
  overload: LobsterFramework.Utility.CombinedValue`1.#ctor*
  nameWithType.vb: CombinedValue(Of T).New(T)
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).New(T)
  name.vb: New(T)
- uid: LobsterFramework.Utility.CombinedValue`1.Value
  commentId: P:LobsterFramework.Utility.CombinedValue`1.Value
  id: Value
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: CombinedValue<T>.Value
  fullName: LobsterFramework.Utility.CombinedValue<T>.Value
  type: Property
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: Value
    path: ../Utility/CombinedValue.cs
    startLine: 31
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  summary: Return thec cached buffered value
  example: []
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: LobsterFramework.Utility.CombinedValue`1.Value*
  nameWithType.vb: CombinedValue(Of T).Value
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).Value
- uid: LobsterFramework.Utility.CombinedValue`1.Compatible(`0)
  commentId: M:LobsterFramework.Utility.CombinedValue`1.Compatible(`0)
  id: Compatible(`0)
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: Compatible(T)
  nameWithType: CombinedValue<T>.Compatible(T)
  fullName: LobsterFramework.Utility.CombinedValue<T>.Compatible(T)
  type: Method
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: Compatible
    path: ../Utility/CombinedValue.cs
    startLine: 40
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  summary: Determines if the effector can be added
  example: []
  syntax:
    content: public virtual bool Compatible(T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: The value of the effector to be examined
    return:
      type: System.Boolean
      description: true if can be added, otherwise false
    content.vb: Public Overridable Function Compatible(obj As T) As Boolean
  overload: LobsterFramework.Utility.CombinedValue`1.Compatible*
  nameWithType.vb: CombinedValue(Of T).Compatible(T)
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).Compatible(T)
- uid: LobsterFramework.Utility.CombinedValue`1.ClearEffectors
  commentId: M:LobsterFramework.Utility.CombinedValue`1.ClearEffectors
  id: ClearEffectors
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: ClearEffectors()
  nameWithType: CombinedValue<T>.ClearEffectors()
  fullName: LobsterFramework.Utility.CombinedValue<T>.ClearEffectors()
  type: Method
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: ClearEffectors
    path: ../Utility/CombinedValue.cs
    startLine: 85
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  summary: Remove all effectors
  example: []
  syntax:
    content: public void ClearEffectors()
    content.vb: Public Sub ClearEffectors()
  overload: LobsterFramework.Utility.CombinedValue`1.ClearEffectors*
  nameWithType.vb: CombinedValue(Of T).ClearEffectors()
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).ClearEffectors()
- uid: LobsterFramework.Utility.CombinedValue`1.MakeEffector
  commentId: M:LobsterFramework.Utility.CombinedValue`1.MakeEffector
  id: MakeEffector
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: MakeEffector()
  nameWithType: CombinedValue<T>.MakeEffector()
  fullName: LobsterFramework.Utility.CombinedValue<T>.MakeEffector()
  type: Method
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: MakeEffector
    path: ../Utility/CombinedValue.cs
    startLine: 97
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  summary: Returns a BufferedValueAccessor that manages setting and removing the effector
  example: []
  syntax:
    content: public CombinedValueEffector<T> MakeEffector()
    return:
      type: LobsterFramework.Utility.CombinedValueEffector{{T}}
      description: A BufferedValueAccessor that manages setting and removing the effector
    content.vb: Public Function MakeEffector() As CombinedValueEffector(Of T)
  overload: LobsterFramework.Utility.CombinedValue`1.MakeEffector*
  nameWithType.vb: CombinedValue(Of T).MakeEffector()
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).MakeEffector()
- uid: LobsterFramework.Utility.CombinedValue`1.EffectorCount
  commentId: P:LobsterFramework.Utility.CombinedValue`1.EffectorCount
  id: EffectorCount
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: EffectorCount
  nameWithType: CombinedValue<T>.EffectorCount
  fullName: LobsterFramework.Utility.CombinedValue<T>.EffectorCount
  type: Property
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: EffectorCount
    path: ../Utility/CombinedValue.cs
    startLine: 104
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  summary: The number of currently active effectors
  example: []
  syntax:
    content: public int EffectorCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property EffectorCount As Integer
  overload: LobsterFramework.Utility.CombinedValue`1.EffectorCount*
  nameWithType.vb: CombinedValue(Of T).EffectorCount
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).EffectorCount
- uid: LobsterFramework.Utility.CombinedValue`1.ComputeValue
  commentId: M:LobsterFramework.Utility.CombinedValue`1.ComputeValue
  id: ComputeValue
  parent: LobsterFramework.Utility.CombinedValue`1
  langs:
  - csharp
  - vb
  name: ComputeValue()
  nameWithType: CombinedValue<T>.ComputeValue()
  fullName: LobsterFramework.Utility.CombinedValue<T>.ComputeValue()
  type: Method
  source:
    remote:
      path: Utility/CombinedValue.cs
      branch: main
      repo: https://github.com/DiceSpinner/LobsterFramework.git
    id: ComputeValue
    path: ../Utility/CombinedValue.cs
    startLine: 110
  assemblies:
  - LobsterFramework
  namespace: LobsterFramework.Utility
  summary: Compute the value taking all effectors into account
  example: []
  syntax:
    content: protected abstract T ComputeValue()
    return:
      type: '{T}'
      description: ''
    content.vb: Protected MustOverride Function ComputeValue() As T
  overload: LobsterFramework.Utility.CombinedValue`1.ComputeValue*
  nameWithType.vb: CombinedValue(Of T).ComputeValue()
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).ComputeValue()
references:
- uid: LobsterFramework.Utility
  commentId: N:LobsterFramework.Utility
  href: LobsterFramework.html
  name: LobsterFramework.Utility
  nameWithType: LobsterFramework.Utility
  fullName: LobsterFramework.Utility
  spec.csharp:
  - uid: LobsterFramework
    name: LobsterFramework
    href: LobsterFramework.html
  - name: .
  - uid: LobsterFramework.Utility
    name: Utility
    href: LobsterFramework.Utility.html
  spec.vb:
  - uid: LobsterFramework
    name: LobsterFramework
    href: LobsterFramework.html
  - name: .
  - uid: LobsterFramework.Utility
    name: Utility
    href: LobsterFramework.Utility.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{System.Int32,{T}}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, T>
  nameWithType: Dictionary<int, T>
  fullName: System.Collections.Generic.Dictionary<int, T>
  nameWithType.vb: Dictionary(Of Integer, T)
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, T)
  name.vb: Dictionary(Of Integer, T)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: LobsterFramework.Utility.CombinedValue`1.op_Implicit*
  commentId: Overload:LobsterFramework.Utility.CombinedValue`1.op_Implicit
  name: implicit operator
  nameWithType: CombinedValue<T>.implicit operator
  fullName: LobsterFramework.Utility.CombinedValue<T>.implicit operator
  nameWithType.vb: CombinedValue(Of T).CType
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: LobsterFramework.Utility.CombinedValue`1
  commentId: T:LobsterFramework.Utility.CombinedValue`1
  parent: LobsterFramework.Utility
  href: LobsterFramework.Utility.CombinedValue-1.html
  name: CombinedValue<T>
  nameWithType: CombinedValue<T>
  fullName: LobsterFramework.Utility.CombinedValue<T>
  nameWithType.vb: CombinedValue(Of T)
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T)
  name.vb: CombinedValue(Of T)
  spec.csharp:
  - uid: LobsterFramework.Utility.CombinedValue`1
    name: CombinedValue
    href: LobsterFramework.Utility.CombinedValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LobsterFramework.Utility.CombinedValue`1
    name: CombinedValue
    href: LobsterFramework.Utility.CombinedValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LobsterFramework.Utility.CombinedValue`1.#ctor*
  commentId: Overload:LobsterFramework.Utility.CombinedValue`1.#ctor
  href: LobsterFramework.Utility.CombinedValue-1.html#LobsterFramework.Utility.CombinedValue`1.#ctor(`0)
  name: CombinedValue
  nameWithType: CombinedValue<T>.CombinedValue
  fullName: LobsterFramework.Utility.CombinedValue<T>.CombinedValue
  nameWithType.vb: CombinedValue(Of T).New
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).New
  name.vb: New
- uid: LobsterFramework.Utility.CombinedValue`1.Value*
  commentId: Overload:LobsterFramework.Utility.CombinedValue`1.Value
  href: LobsterFramework.Utility.CombinedValue-1.html#LobsterFramework.Utility.CombinedValue`1.Value
  name: Value
  nameWithType: CombinedValue<T>.Value
  fullName: LobsterFramework.Utility.CombinedValue<T>.Value
  nameWithType.vb: CombinedValue(Of T).Value
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).Value
- uid: LobsterFramework.Utility.CombinedValue`1.Compatible*
  commentId: Overload:LobsterFramework.Utility.CombinedValue`1.Compatible
  href: LobsterFramework.Utility.CombinedValue-1.html#LobsterFramework.Utility.CombinedValue`1.Compatible(`0)
  name: Compatible
  nameWithType: CombinedValue<T>.Compatible
  fullName: LobsterFramework.Utility.CombinedValue<T>.Compatible
  nameWithType.vb: CombinedValue(Of T).Compatible
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).Compatible
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: LobsterFramework.Utility.CombinedValue`1.ClearEffectors*
  commentId: Overload:LobsterFramework.Utility.CombinedValue`1.ClearEffectors
  href: LobsterFramework.Utility.CombinedValue-1.html#LobsterFramework.Utility.CombinedValue`1.ClearEffectors
  name: ClearEffectors
  nameWithType: CombinedValue<T>.ClearEffectors
  fullName: LobsterFramework.Utility.CombinedValue<T>.ClearEffectors
  nameWithType.vb: CombinedValue(Of T).ClearEffectors
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).ClearEffectors
- uid: LobsterFramework.Utility.CombinedValue`1.MakeEffector*
  commentId: Overload:LobsterFramework.Utility.CombinedValue`1.MakeEffector
  href: LobsterFramework.Utility.CombinedValue-1.html#LobsterFramework.Utility.CombinedValue`1.MakeEffector
  name: MakeEffector
  nameWithType: CombinedValue<T>.MakeEffector
  fullName: LobsterFramework.Utility.CombinedValue<T>.MakeEffector
  nameWithType.vb: CombinedValue(Of T).MakeEffector
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).MakeEffector
- uid: LobsterFramework.Utility.CombinedValueEffector{{T}}
  commentId: T:LobsterFramework.Utility.CombinedValueEffector{`0}
  parent: LobsterFramework.Utility
  definition: LobsterFramework.Utility.CombinedValueEffector`1
  href: LobsterFramework.Utility.CombinedValueEffector-1.html
  name: CombinedValueEffector<T>
  nameWithType: CombinedValueEffector<T>
  fullName: LobsterFramework.Utility.CombinedValueEffector<T>
  nameWithType.vb: CombinedValueEffector(Of T)
  fullName.vb: LobsterFramework.Utility.CombinedValueEffector(Of T)
  name.vb: CombinedValueEffector(Of T)
  spec.csharp:
  - uid: LobsterFramework.Utility.CombinedValueEffector`1
    name: CombinedValueEffector
    href: LobsterFramework.Utility.CombinedValueEffector-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LobsterFramework.Utility.CombinedValueEffector`1
    name: CombinedValueEffector
    href: LobsterFramework.Utility.CombinedValueEffector-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LobsterFramework.Utility.CombinedValueEffector`1
  commentId: T:LobsterFramework.Utility.CombinedValueEffector`1
  href: LobsterFramework.Utility.CombinedValueEffector-1.html
  name: CombinedValueEffector<T>
  nameWithType: CombinedValueEffector<T>
  fullName: LobsterFramework.Utility.CombinedValueEffector<T>
  nameWithType.vb: CombinedValueEffector(Of T)
  fullName.vb: LobsterFramework.Utility.CombinedValueEffector(Of T)
  name.vb: CombinedValueEffector(Of T)
  spec.csharp:
  - uid: LobsterFramework.Utility.CombinedValueEffector`1
    name: CombinedValueEffector
    href: LobsterFramework.Utility.CombinedValueEffector-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LobsterFramework.Utility.CombinedValueEffector`1
    name: CombinedValueEffector
    href: LobsterFramework.Utility.CombinedValueEffector-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LobsterFramework.Utility.CombinedValue`1.EffectorCount*
  commentId: Overload:LobsterFramework.Utility.CombinedValue`1.EffectorCount
  href: LobsterFramework.Utility.CombinedValue-1.html#LobsterFramework.Utility.CombinedValue`1.EffectorCount
  name: EffectorCount
  nameWithType: CombinedValue<T>.EffectorCount
  fullName: LobsterFramework.Utility.CombinedValue<T>.EffectorCount
  nameWithType.vb: CombinedValue(Of T).EffectorCount
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).EffectorCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: LobsterFramework.Utility.CombinedValue`1.ComputeValue*
  commentId: Overload:LobsterFramework.Utility.CombinedValue`1.ComputeValue
  href: LobsterFramework.Utility.CombinedValue-1.html#LobsterFramework.Utility.CombinedValue`1.ComputeValue
  name: ComputeValue
  nameWithType: CombinedValue<T>.ComputeValue
  fullName: LobsterFramework.Utility.CombinedValue<T>.ComputeValue
  nameWithType.vb: CombinedValue(Of T).ComputeValue
  fullName.vb: LobsterFramework.Utility.CombinedValue(Of T).ComputeValue
